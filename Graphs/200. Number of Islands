USING DFS:

void dfs(int i, int j, vector<vector<int>>& vis, vector<vector<char>>& grid){
            int n = grid.size(), m = grid[0].size();
            vis[i][j] = 1;
            int rowc[] = {-1,0,1,0}, colc[] = {0,1,0,-1}; 
            
            for(int k = 0; k < 4; k++){
                int nrow = i + rowc[k];
                    int ncol = j + colc[k];
                    if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == '1' && !vis[nrow][ncol]){
                        dfs(nrow,ncol,vis,grid);                        
                    }
            }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        int count = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(!vis[i][j] && grid[i][j] == '1'){
                    dfs(i,j,vis,grid);
                    count++;
                } 
            }
        }
        return count;
    }
    
    
    
    
    USING BFS:
    
    void bfs(int i, int j, vector<vector<int>>& vis, vector<vector<char>>& grid){
        int n = grid.size(), m = grid[0].size();
        queue<pair<int,int>> q;
        vis[i][j] = 1;
        q.push({i,j});
        int rowc[] = {-1,0,1,0}, colc[] = {0,1,0,-1}; 
        
        while(!q.empty()){
            int row = q.front().first, col = q.front().second;
            q.pop();
            for(int k = 0; k < 4; k++){
                
                    int nrow = row + rowc[k];
                    int ncol = col + colc[k];
                    if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == '1' && !vis[nrow][ncol]){
                        vis[nrow][ncol] = 1;
                        q.push({nrow,ncol});
                    
                }
            }
        }
        
        
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        int count = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(!vis[i][j] && grid[i][j] == '1'){
                    bfs(i,j,vis,grid);
                    count++;
                } 
            }
        }
        return count;
    }
