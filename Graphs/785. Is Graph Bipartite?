bool bfs(int start, vector<int>& vis,vector<vector<int>>& graph) {
        int n = graph.size();
        queue<int> q;
        q.push(start);
        vis[start] = 1;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto i : graph[node]){
                if(!vis[i]){
                    vis[i] = (vis[node] == 1) ? 2 : 1;
                    q.push(i);
                }
                else if(vis[i] && vis[i] == vis[node]) return false;
            }
        }
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph){
        int n = graph.size();
        vector<int> vis(n,0);
        bool ans;
        for(int i = 0; i < n; i++){
            if(!vis[i]){
                if(!bfs(i,vis,graph)) return false;
            } 
        }
        return true;
    }
