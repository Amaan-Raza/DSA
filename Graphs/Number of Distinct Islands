void dfs(int i, int j, vector<vector<int>>& vis, vector<vector<int>>& grid, vector<pair<int,int>>& vec, int row0, int col0){
        int n = grid.size(), m = grid[0].size();
        vis[i][j] = 1;
        vec.push_back({i-row0, j-col0});
        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,1,0,-1};
        for(int k = 0; k < 4; k++){
            int nrow = i + delrow[k];
            int ncol = j + delcol[k];
            if(nrow >= 0 && ncol >= 0 && nrow < n && ncol < m && vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1){
                dfs(nrow,ncol,vis,grid,vec,row0,col0);
            }
        }
    }
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        set<vector<pair<int,int>>> st;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(!vis[i][j] && grid[i][j] == 1){
                    vector<pair<int,int>> vec;
                    dfs(i,j,vis,grid,vec,i,j);
                    st.insert(vec);
                }
            }
        }
        
        return st.size();
    }
