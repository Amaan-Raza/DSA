class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n = heights.size(), m = heights[0].size();
        vector<vector<int>> dis(n,vector<int>(m,1e9));
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>, greater<pair<int,pair<int,int>>>> q;
        
        q.push({0,{0,0}});
        dis[0][0] = 0;
        
        int delRow[] = {-1,0,1,0};
        int delCol[] = {0,1,0,-1};
        
        while(!q.empty()){
            int d = q.top().first;
            int row = q.top().second.first;
            int col = q.top().second.second; 
            q.pop();
            
            if(row == n-1 && col == m-1) return d;
            for(int i = 0; i < 4; i++){
                int nrow = row + delRow[i];
                //cout << nrow << endl;
                int ncol = col + delCol[i];
                //cout << ncol << endl;
                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m){
                    int d2 = max(d, abs(heights[nrow][ncol] - heights[row][col]));
                    if(d2 < dis[nrow][ncol]){
                        dis[nrow][ncol] = d2;
                        q.push({d2,{nrow,ncol}});
                    }
                }
            }
        }
        return 0;
    }
};
