  void topo(int i, int vis[], vector<pair<int,int>> adj[], stack<int>& s){
        vis[i] = 1;

        for(auto it : adj[i]){
            int v = it.first;
            if(!vis[v]){
                topo(v,vis,adj,s);
            }
        }
        s.push(i);
    }
     vector<int> shortestPath(int n,int m, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>> adj[n];
        for(int i = 0; i < m; i++){
            int v = edges[i][0];
            int u = edges[i][1];
            int wt = edges[i][2];
            adj[v].push_back({u,wt});
        }
        
        stack<int> st;
        int vis[n] = {0};
        for(int i = 0; i < n; i++){
            if(!vis[i]){
                topo(i,vis,adj,st);
            }
        }
        
        vector<int> dis(n,1e9);
        dis[0] = 0;
        while(!st.empty()){
            int node = st.top();
            st.pop();
            for(auto i : adj[node]){
                int v = i.first;
                int wt = i.second;
                if(dis[node] + wt < dis[v]){
                    dis[v] = dis[node] + wt;
                }
            }
        }
        for (int i = 0;i < n;i++){
            if (dis[i] == 1e9) dis[i] = -1;
        }

        return dis;
    }
