    USING BFS:
    
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int scolor) {
        int n = image.size(), m = image[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        int pcolor = image[sr][sc];
        queue<pair<int,int>> q;
        vis[sr][sc] = 1;
        image[sr][sc] = scolor;
        q.push({sr,sc});
        int delRow[] = {-1,0,1,0};
        int delCol[] = {0,1,0,-1};
        while(!q.empty()){
            int r = q.front().first, c = q.front().second;
            q.pop();
            for(int k = 0; k < 4; k++){
                int nr = r + delRow[k] , nc = c + delCol[k];
                if(nr >= 0 && nr < n && nc >= 0 && nc < m && image[nr][nc] == pcolor && !vis[nr][nc]){
                    vis[nr][nc] = 1;
                    image[nr][nc] = scolor;
                    q.push({nr,nc});
                }
            }
            
        }
        return image;
    }
    
    USING DFS:
    
    void f(int row, int col, vector<vector<int>>& ans, vector<vector<int>>& image, int pcolor, int scolor,int delRow[],int delCol[]){
        ans[row][col] = scolor;
        int n = image.size(), m = image[0].size();
        for(int i = 0; i < 4; i++){
            int nrow = row + delRow[i];
            int ncol = col + delCol[i];
            if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && image[nrow][ncol] == pcolor && ans[nrow][ncol] != scolor) f(nrow,ncol,ans,image,pcolor,scolor,delRow,delCol);
        }
        
    }
    
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int scolor) {
        int pcolor = image[sr][sc];
        vector<vector<int>> ans = image;
        int delRow[] = {-1,0,1,0};
        int delCol[] = {0,1,0,-1};
        f(sr,sc,ans,image,pcolor,scolor,delRow,delCol);
        return ans;
    }
