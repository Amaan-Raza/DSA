class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid[0][0] == 1) return -1;
        
        int n = grid.size(), m = grid[0].size();   
        if(grid[0][0] == 0 && n == 1 && m == 1) return 1;
        queue<pair<int,pair<int,int>>> q;     
        vector<vector<int>> dis(n,vector<int>(m,1e9));
        int rows[] = {-1, -1, 0, 1, 1, 1, 0, -1};
        int cols[] = {0, 1, 1, 1, 0, -1, -1, -1};
        
        q.push({0,{0,0}});
        dis[0][0] = 0;
        while(!q.empty()){
            int d = q.front().first;
            int row = q.front().second.first;
            int col = q.front().second.second;
            q.pop();
            for(int i = 0; i < 8; i++){
                int nrow = row + rows[i];
                int ncol = col + cols[i];
                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == 0){
                   if((d + 1) < dis[nrow][ncol]){
                       dis[nrow][ncol] = d + 1;
                       if(nrow == n-1 && ncol == m-1) return d+2;
                       q.push({d+1, {nrow,ncol}});
                   }
                }
            }
        }
        return (dis[n-1][m-1] != 1e9) ? dis[n-1][m-1] : -1;
        
    }
};
