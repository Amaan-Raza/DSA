vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    int indegree[V] = {0};
	    for(int i = 0; i < V; i++){
	        for(auto j : adj[i]){
	            indegree[j]++;
	        }
	    }
	    
	    queue<int> q;
	    for(int i = 0; i < V; i++){
	        if(!indegree[i]) q.push(i);
	    }
	    
	    vector<int> ans;
	    while(!q.empty()){
	        int i = q.front();
	        q.pop();
	        ans.push_back(i);
	        for(auto it : adj[i]){
	            indegree[it]--;
	            if(!indegree[it]) q.push(it);
	        }
	    }
	    return ans;
	}
    string findOrder(string dict[], int n, int k) {
        vector<int> adj[k];
        for(int i = 0; i < n-1; i++){
            string s1 = dict[i];
            string s2 = dict[i+1];
            int len = min(s1.length(), s2.length());
            for(int j = 0; j < len; j++){
                if(s1[j] != s2[j]){
                    adj[s1[j]-'a'].push_back(s2[j]-'a');
                    break;
                }
            }
        }
        
        vector<int> topo = topoSort(k, adj);
        string ans = "";
        for(auto i : topo){
            ans = ans + char(i + 'a');
        }
        return ans;
        
    }
