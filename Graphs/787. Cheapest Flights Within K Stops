class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>> adj[n];
        vector<int> dis(n,1e9);
        for(int i = 0; i < flights.size(); i++){
            adj[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{src,0}});
        dis[src] = 0;
        
        while(!q.empty()){
            int stops = q.front().first;
            int node = q.front().second.first;
            int price = q.front().second.second;
            q.pop();
            if(stops > k+1) continue;
            for(auto i : adj[node]){
                int cost = i.second + price;
                if(cost < dis[i.first] && stops + 1 <= k+1){
                    q.push({stops+1,{i.first,cost}});
                    dis[i.first] = cost;
                }
            }
        }
        return (dis[dst] == 1e9) ? -1 : dis[dst];
        
    }
};
