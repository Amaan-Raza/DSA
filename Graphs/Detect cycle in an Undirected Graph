USING BFS:


bool bfs(int n, vector<int> adj[], vector<int>& vis) {
        // Code here
        
        queue<pair<int,int>> q;
        q.push({n,-1});
        vis[n] = 1;
        while(!q.empty()){
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            for(auto i : adj[node]){
                if(!vis[i]){
                    q.push({i,node});
                    vis[i] = 1;
                }
                else if(vis[i] == 1 && i != parent){
                    return true;
                }
            }
        }
        return false;
    }
    
    bool isCycle(int n, vector<int> adj[]){
        vector<int> vis(n,0);
        for(int i = 0; i < n; i++){
            if(!vis[i]){
                if(bfs(i,adj,vis)) return true;
            }
        }
        return false;
    }
    
    
    USING DFS:
    
    
    bool dfs(int i, int parent, vector<int> adj[], vector<int>& vis) {
        vis[i] = 1; 
        bool ans = false;
        for(auto n : adj[i]){
            if(!vis[n]){
                ans = dfs(n,i,adj,vis);
            }
            else if(vis[n] == 1 && n != parent) return true;
        }
        return ans;
    }
    
    bool isCycle(int n, vector<int> adj[]){
        vector<int> vis(n,0);
        for(int i = 0; i < n; i++){
            if(!vis[i]){
                if(dfs(i,-1,adj,vis)) return true;
            }
        }
        return false;
    }
