USING DFS:

bool dfs(int i, int vis[], int pathVis[], vector<int> adj[]){
        vis[i] = 1;
        pathVis[i] = 1;
        for(auto it : adj[i]){
            if(!vis[it]){
                if(dfs(it,vis,pathVis,adj)) return true;
            }
            else if(pathVis[it]){
                return true;
            }
        }
        pathVis[i] = 0;
        return false;
    }
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        int vis[V] = {0};
        int pathVis[V] = {0};
        
        for(int i = 0; i < V; i++){
            if(!vis[i]){
                if(dfs(i,vis,pathVis,adj)) return true;
            }
        }
        return false;
    }
    
    USING TOPOLOGICAL SORT (KAHN'S ALGO):
    
    bool isCyclic(int V, vector<int> adj[]) {
        int indegree[V] = {0};
	    for(int i = 0; i < V; i++){
	        for(auto j : adj[i]){
	            indegree[j]++;
	        }
	    }
	    
	    queue<int> q;
	    for(int i = 0; i < V; i++){
	        if(!indegree[i]) q.push(i);
	    }
	    
	    vector<int> ans;
	    while(!q.empty()){
	        int i = q.front();
	        q.pop();
	        ans.push_back(i);
	        for(auto it : adj[i]){
	            indegree[it]--;
	            if(!indegree[it]) q.push(it);
	        }
	    }
	    if(ans.size() == V) return false;
	    return true;
    }
